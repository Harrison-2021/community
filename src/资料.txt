第一课时：
    1. maven 配置与操作，官网->user Centre->Maven in 5 Minutes:
        1. mvn -version，查看版本
        2. 创建项目，找到要创建对象保存的地址，
            mvn archetype:generate -DgroupId=com.nowcoder.mavendemo1 -DartifactId=mavendemo1 -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false
        3. 项目编译，找到目标文件下，mvn compile
        4. 重新编译，mvn clean compile
        5. 测试，mvn clean test
   2. Spring Boot 核心作用
        1. 起步依赖、自动配置、端点监控

   3. tomcat服务器，可以更改端口，在application.properties配置文件中修改
        server.port=8080
        server.servlet.context-path=/community

   4. IOC容器设计：用容器管理bean，bean相当于类的代理，减少对象之间的耦合度
        1. 前提：管理哪些bean，以及benn的类型，
            配置文件进行配置，通过配置描述进行关联，不是对象之间直接关联
        2. 运行原理： SpringApplication，运行时，不仅自动启动tomcate，还自动创建了Spring容器，容器会自动扫描包，配置信息，
        3. 注解的种类:1是使用bean，@Autowired,@
            2是注册bean,@Component,@Repository,@Controller,@Service, @Configuration这些注解都是把你要实例化的对象转化成一个Bean，放在IoC容器中，等你要用的时候，它会和上面的@Autowired , @Resource配合到一起，把对象、属性、方法完美组装。
        4. 在测试类中演示IOC运行机制
            首先，在测试类中添加注解配置，@ContextConfiguration(classes = CommunityApplication.class)
            类要实现ApplicationContextAware接口，并重写set方法
	        书写操作数据库的文件AlphaDaoHibernateImpl，从AlphaDAO继承，加上注解@Repository，会将类加到容器里
	        在测试类中，用容器拿到bean，再将拿到的bean打印出来进行测试
	    5. 为了体现IOC运行的优势，再创建一个操作数据库文件AlphaDaoMybatisImpl，同样继承
	        为了作出区分，多加一个注解@Primary,就会优先调用，因此，定义好接口，只需修改配置注解，就可以降低对象之间的耦合度
	    6. 可以在注解中，加上bean的名字，这样，可以直接通过名字获取bean
	    7. IOC容器还可以管理bean的初始化和销毁
	        增加一个Service对象，在初始化方法上注解@PostConstruct，
	        在销毁方法前加注解@PreDestroy
	    8. 用IOC管理其他包的类，
	        建立一个配置类，在配置类中进行依赖管理，config->AlphaConfig->@Configuration
            在目标方法前，加入注解@Bean，将方法返回的对象装到容器里，SimpleDateFormat
        9. Spring Boot框架中自动获取Bean方法，
            @Autowired，在类属性前注入，获取目标Bean，默认是@Primary注解的Bean
            @Qualifier,写上Bean的名字，可以自动装配改名字的Bean
        10. 项目中调用流程：Controller调用Service，Service调用DAO，都是用依赖注入的方式调用
   5. Spring MVC，注意三层架构和MVC不是一回事
        1. DispatcherServlet是整个SpringMVC的核心
            首先，浏览器的请求都由FrontController前端控制器中的DispatcherServlet类来控制，
            DispatcherServlet根据映射的注解找到Controller，将请求下发，
                然后Controller会把数据封装到model里将回复返回给前端控制器
            前端控制器得到回复后，会调用View template，并将model给模板，template中的动态符号会用model中动态值替换，生成动态网页
                View中生成一个html后返回前端控制器，控制器将html响应给浏览器
        2. 模板引擎用的是Thymeleaf，在配置文件中进行配置
            1.将默认的缓存关掉，可以实时更新页面，上线时候可以再开启，降低服务器压力
                spring.thymeleaf.cache=false
            2. 接收请求和响应的底层实现，request，response
            3. 框架中简单的操作，请求数据的处理，框架已经将底层操作包装好了
                1. get请求，/students?current=1&limit=20，
                    @RequestMapping(path="",method=RequestMethod.GET),先解析相对路径，和请求方法
                    方法中传入参数， 加入注解@RequestParam，required，是否一定要写入参数，defaultValue，默认值
                2. get请求中，将参数当成路径的一部分，即/student/123
                    @RequestMapping(path = "/student/{id}", method = RequestMethod.GET)
                    @PathVariable("id") int id
                3. post请求，get请求是在路径上传的，传输的东西较多，且内容不能被显示出来时，用post
                    1. 创建一个静态网页，新建一个html的表单，
                        表单中注明请求方法，请求的url相对地址，注意是相对于根目录
                        创建两个输入框，一个保存按钮，注意类型，名称
                    2. 在Controller层书写获取post的请求，传入的参数只要和表单一致，就可以获取请求，可以直接写不用写注解
            4. 框架中响应数据的处理
                1.  响应html动态数据，不加ResponseBody，返回类型是ModelAndView，将model与view的数据都装进一个对象里
                    1. 先实例化对象 modelAndView，
                    2. 将动态的要响应的值传入，addObject
                    3. 跳转到动态资源文件，即模板，进行渲染，setVieName，传入目标模板路径的文件名
                        1，先将模板进行声明，注明是动态模板，xmlns:th="http://www.thymeleaf.org"
                        2. 用th:text="${name}"获取变量
	            2. 第二种响应方式，用model对象。自动实例话model对象，直接装数据
	                    1. addAttribute
	            3. 区别：ModelAndView，将model与view的数据都装进一个对象里
	                     model，将model作为参数传入，自动创建model实例，在model种装入数据，返回的视图view直接作为返回给控制器DispatcherServlet
                4. 响应JSON数据，异步请求，当前网页不动，悄悄的访问服务器一次
                    响应JSON数据(异步请求)
                    Java对象 -> JSON字符串 -> JS对象
                    @ResponseBody如果想返回js对象，必须加这个
                        定义一个map存储数据，DispatcherSer识别后，会自动将map转成一个js字符串返回给浏览器
                        也可以定义一个List集合，集合内装map
   6. MyBatis初步：
        1. 配置数据库，连接池，映射文件等配置
        2. 要用实体类封装表里的数据，在entity包下新建User实体类，将变量定义好，并定义好get与set方法
        3. 在dao层处理数据库，只需实现接口，添加MyBatis的注解@Mapper，
            在接口中只需声明方法，即增删改查，注意返回类型
            然后在mapper包下创建一个xml文件中进行配置注解sql语句
        4. 在Mybatis官网入门找到配置文件模板
            1. 修改namespace，对应到要配置的接口，为哪个接口服务，对应到哪个接口
            2. 在主体里要写各种标签，每个标签对应接口中的一个方法
                标签即sql语句的select，insert，update，delete等
                要注明id，id对应到方法名，resultType注明返回的类型，按理说要将实体类的全限定名，但，配置中注解了，可以省略包名
                用#{id}引用实体类中的变量，即方法中的变量
                    注意，若参数不是基本类型，而是自定义的Bean类型，要进行声明，用parameterType
                    注意，增加时候，要配置主键声明：keyProperty，mysql底层会自动生成id，mybatis会得到这个id
                为了解决重复写字段，可以先用<sql,id="selectFields">...</sql>将字段定义好，后面直接引用就行
                    引用时，用<include refid="selectFields"></include>标签
        5. 为了便于调试，将logger配置调低些，打印出更多消息
            logger.level.com.nowcoder.community=debug
   7. 社区首页开发，
        1. 处理dao层，创建实例封装表数据->dao层创建mapper接口->配置xml文件处理sql语句->测试
        2. 开发业务层：service层，新建类，与测试代码类似，主要处理数据
            1. 在DiscussPastService类中，与mapper接口方法类似，实现具体查找讨论内容的方法
            2. 将id与用户信息结合，单独查到user
        3. 将resource目录下的配置文件树状结构在idea设置中打开
            1. 将静态资源css，img,js放到静态目录下，将site，index.html首页，和mail页面放到模板中
        4. 开发视图层，即controller，HomeController
            1. 将service层注入进来
            2. 设定url，/index, method,get
               返回模板路径
            3. 主体逻辑，查询10条数据，返回list
                将查到的数据组装，即将post帖子与用户信息依次遍历，放到一个装有映射容器的列表容器中
                将组装的集合信息放到model中反馈给前端页面
            4. 处理模板页面：index.html
                1. 先配置模板引擎xmlns:th="http://www.thymeleaf.org"
                2. 对于头文件中的相对路径，要用th：href="@{/../..}"修饰，让模板去找到动态页面
                3. 修改帖子列表内容，只保留一个li标签，在此标签里进行遍历输出
                    th:each="map:${传入要遍历的集合}",map是遍历后返回的类型
                    找到要改变的动态遍历，前面用th:修饰，在书写变量出用格式${map.user.headerUrl}，模板自动调用get方法
                    链接没开始写，可以先用#替代，防止误点，这样链接到帖子顶部,
                    用th:text="${}"书写文本内容，
                        用th:utext="${}"，将转义字符自动识别正确显示，例如，&lt 为 <
                    用th:if="${}"进行判断
                    用th:text="${#dates.format(数据，‘yyyy-MM-dd HH:mm:ss'}" 用#引用模板工具







































